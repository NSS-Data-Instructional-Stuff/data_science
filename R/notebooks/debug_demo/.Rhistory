group_by(num_sch) |>
summarize(mean(sd_dev, na.rm = TRUE))
library(tidyverse)
stops <- read_csv("../data/headway_data_clean.csv")
stops <- stops |>
mutate(ROUTE_ABBR = factor(ROUTE_ABBR))
stops <- stops |>
mutate(SCHEDULED_HOUR = factor(hour(SCHEDULED_TIME)))
library(lme4)
stops <- stops |>
mutate(OPERATOR = factor(OPERATOR))
stops <- stops |>
unite(ID, CALENDAR_ID, TRIP_ID)
mlm1 <- lmer('HDWY_DEV ~ (1|ROUTE_ABBR) + (1|SCHEDULED_HOUR) + (1|OPERATOR)',
data = stops)
summary(mlm1)
mlm2 <- lmer('HDWY_DEV ~ (1|ROUTE_ABBR) + (1|SCHEDULED_HOUR) + (1|OPERATOR/ID)',
data = stops |>
filter(abs(HDWY_DEV) < 60)
)
summary(mlm2)
var_mlm2 <- lmer('resid^2 ~ (1|ROUTE_ABBR) + (1|SCHEDULED_HOUR) + (1|OPERATOR/ID)',
data = bind_cols(
stops |>
filter(abs(HDWY_DEV) < 60) |>
drop_na(HDWY_DEV),
tibble(resid = resid(mlm2)))
#family = Gamma(link = "identity")
)
summary(var_mlm2)
sqrt(14.908)
anova(mlm1, mlm2)
mlm1 <- lmer('HDWY_DEV ~ (1|ROUTE_ABBR) + (1|SCHEDULED_HOUR) + (1|OPERATOR)',
data = stops |>
filter(abs(HDWY_DEV) < 60)
)
summary(mlm1)
anova(mlm1, mlm2)
library(tidyverse)
n_distince(c(NA, 1, 2, 3))
n_distinct(c(NA, 1, 2, 3))
n_distinct(c(NA, NA, 1, 2, 3))
library(tidyverse)
stops <- read_csv("../data/headway_data_clean.csv")
stops <- stops |>
mutate(on_time = ADHERENCE > -6 & ADHERENCE < 1)
stops |>
summarize(otp = mean(on_time, na.rm = TRUE))
stops <- stops |>
mutate(OPERATOR = factor(OPERATOR))
stops |>
select(OPERATOR, on_time) |>
group_by(OPERATOR) |>
summarize(OTP = mean(on_time, na.rm = TRUE)) |>
arrange(OTP)
get_lb <- function(x, n){
prop.test(x,n)$conf.int[1]
}
a <- get_lb(4, 6)
a
stops |>
drop_na(on_time) |>
group_by(OPERATOR) |>
summarize(x = sum(on_time), n = n()) |>
rowwise() |>
mutate(ci = list(prop.test(x, n)$conf.int)) |>
unnest_wider(ci, names_sep = '') |>
arrange(ci2)
ontime_lr <- glmer(on_time ~ ROUTE_ABBR + (1 | OPERATOR),
data = stops,
family = binomial)
library(lme4)
ontime_lr <- glmer(on_time ~ ROUTE_ABBR + (1 | OPERATOR),
data = stops,
family = binomial)
ontime_lr
ontime_lr <- glmer(on_time ~ ROUTE_ABBR + (1 | OPERATOR),
data = stops,
family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5))
ontime_lr
ontime_lr <- glmer(on_time ~ ROUTE_ABBR + (1 | OPERATOR),
data = stops,
family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
ontime_lr
stops <- stops |>
mutate(ROUTE_ABBR = factor(ROUTE_ABBR))
ontime_lr <- glmer(on_time ~ ROUTE_ABBR + (1 | OPERATOR),
data = stops,
family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
ontime_lr <- glmer(on_time ~ ROUTE_ABBR + (1 | OPERATOR),
data = stops,
family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
ontime_lr
log_reg_simple <- glm(on_time ~ ROUTE_ABBR,
data = stops,
family = binomial)
library(lmtest)
lrtest(log_reg_simple, ontime_lr)
lrtest(log_reg_simple, ontime_lr)
summary(log_reg_simple)
operator_coef <- ranef(ontime_lr)
tibble(
OPERATOR = operator_coef |> rownames(),
coef = operator_coef |> pull()
) |>
arrange(coef) |> view()
operator_coef
operator_coef <- ranef(ontime_lr)$OPERATOR
tibble(
OPERATOR = operator_coef |> rownames(),
coef = operator_coef |> pull()
) |>
arrange(coef) |> view()
ontime_lr_1 <- glmer(on_time ~ (1 | OPERATOR),
data = stops,
family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
ontime_lr_1
lrtest(ontime_lr_1)
lrtest(ontime_lr_1)
anova(ontime_lr_1)
lrtest(ontime_lr_1, ontime_lr)
stops <- stops |>
mutate(ID = paste(CALENDAR_ID, TRIP_ID, sep = "_"))
stops_by_trip <- stops |>
drop_na(on_time) |>
group_by(ID, OPERATOR) |>
summarize(ot = as.logical(min(on_time)), mean_otp = mean(on_time))
stops_by_trip |>
ggplot(aes(x = mean_otp)) + geom_histogram()
stops_by_trip |>
group_by(OPERATOR) |>
summarize(ot_trips = sum(ot), num_trips = n()) |>
rowwise() |>
mutate(otp = ot_trips / num_trips,
ci = list(prop.test(ot_trips, num_trips)$conf.int)) |>
unnest_wider(ci, names_sep = '') |>
arrange(ci2)
stops_by_trip |>
group_by(OPERATOR) |>
summarize(ot_trips = sum(ot), num_trips = n()) |>
rowwise() |>
mutate(otp = ot_trips / num_trips,
ci = list(prop.test(ot_trips, num_trips)$conf.int)) |>
unnest_wider(ci, names_sep = '') |>
arrange(desc(ci1))
var_model <- glm('HDWY_DEV^2 ~ ROUTE_ABBR',
data = stops,
family = Gamma(link = "identity"))
var_model <- glm('HDWY_DEV^2 + 0.01 ~ ROUTE_ABBR',
data = stops,
family = Gamma(link = "identity"))
summary(var_model)
stops |>
group_by(ROUTE_ABBR) |>
summarize(var(HDWY_DEV, na.rm = TRUE))
stops <- stops |>
mutate(SCHEDULED_HOUR = factor(hour(SCHEDULED_TIME)))
var_model <- glm('HDWY_DEV^2 + 0.01 ~ ROUTE_ABBR + SCHEDULED_HOUR',
data = stops,
family = Gamma(link = "identity"))
summary(var_model)
library(tidyverse)
library(sf)
burglaries <- read_csv("../data/burglaries_2023.csv")
burglaries <- burglaries %>%
distinct(incident_number, .keep_all = TRUE) %>%
drop_na(latitude) %>%
select(incident_number, latitude, longitude)
census <- read_csv("../data/census.csv")
tracts <- st_read("../data/DC")
burglaries_sf <- st_as_sf(burglaries, coords = c("longitude", "latitude"), crs = 4269)
burglaries_tracts <- st_join(tracts, burglaries_sf, join = st_contains) %>%
st_drop_geometry()
burglaries_tracts <- burglaries_tracts %>%
group_by(TRACTCE) %>%
summarize(num_burglaries = n_distinct(incident_number, na.rm = TRUE)) |>
arrange(desc(num_burglaries)) %>%
rename(tract = TRACTCE) %>%
right_join(census)
burglaries_tracts |>
ggplot(aes(x = population)) +
geom_histogram()
burglaries_tracts <- burglaries_tracts %>%
filter(population > 0, median_income > 0)
burglaries_tracts %>%
ggplot(aes(x = median_income, y = num_burglaries)) +
geom_point()
burglaries_tracts %>%
mutate(burglaries_per_thousand = num_burglaries * 1000 / population) |>
ggplot(aes(x = median_income, y = burglaries_per_thousand)) +
geom_point()
burg_poisson_simple <- glm(num_burglaries ~ median_income,
family = poisson,
data = burglaries_tracts)
summary(burg_poisson)
burg_poisson_simple <- glm(num_burglaries ~ median_income,
family = poisson,
data = burglaries_tracts)
summary(burg_poisson_simple)
burg_poisson <- glm(num_burglaries ~ median_income + offset(log(population/1000)),
family = poisson,
data = burglaries_tracts)
summary(burg_poisson)
library(AER)
dispersiontest(burg_poisson)
burg_quasipoisson <- glm(num_burglaries ~ median_income + offset(log(population/1000)),
family = quasipoisson,
data = burglaries_tracts)
summary(burg_quasipoisson)
burg_quasipoisson2 <- glm(num_burglaries ~ median_income),
burg_quasipoisson2 <- glm(num_burglaries ~ median_income),
burg_quasipoisson2 <- glm(num_burglaries ~ median_income,
family = quasipoisson,
data = burglaries_tracts)
summary(burg_quasipoisson2)
library(MASS)
burg_nb <- glm.nb(num_burglaries ~ median_income + offset(log(population/1000)),
data = burglaries_tracts)
summary(burg_nb)
burg_nb2 <- glm.nb(num_burglaries ~ median_income,
data = burglaries_tracts)
summary(burg_nb2)
lrtest(burg_poisson_simple, burg_poisson)
library(lmtest)
lrtest(burg_nb2, burg_nb)
library(lmtest)
lrtest(burg_poisson_simple, burg_poisson)
median_income <- seq(from = 20000, to = 180000, length.out = 5)
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dnbinom(0:20,
mu = predict(burg_poisson,
newdata = tibble(median_income = x, population = 4000), type = "response")
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
median_income <- seq(from = 20000, to = 180000, length.out = 5)
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dpois(0:20,
mu = predict(burg_poisson,
newdata = tibble(median_income = x, population = 4000), type = "response")
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
median_income <- seq(from = 20000, to = 180000, length.out = 5)
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dpois(0:20,
lambda = predict(burg_poisson,
newdata = tibble(median_income = x, population = 4000), type = "response")
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
burglaries_tracts |>
mutate(group = ntile(median_income, 5)) |>
group_by(group) |>
summarize(mean(num_burglaries / (population / 1000)))
burglaries_tracts |>
mutate(group = ntile(median_income, 5)) |>
group_by(group) |>
summarize(mean(num_burglaries / (population / 4000)))
burglaries_tracts |>
mutate(group = ntile(median_income, 5)) |>
group_by(group) |>
summarize(mean(median_income), mean(num_burglaries / (population / 4000)))
View(burg_quasipoisson2)
View(burg_quasipoisson)
burg_poisson <- glm(num_burglaries ~ median_income + offset(log(population)),
family = poisson,
data = burglaries_tracts)
summary(burg_poisson)
burg_poisson_simple <- glm(num_burglaries ~ median_income,
family = poisson,
data = burglaries_tracts)
summary(burg_poisson_simple)
burg_poisson <- glm(num_burglaries ~ median_income + offset(log(population)),
family = poisson,
data = burglaries_tracts)
summary(burg_poisson)
burg_poisson <- glm(num_burglaries ~ median_income + offset(log(population/1000)),
family = poisson,
data = burglaries_tracts)
summary(burg_poisson)
View(burg_poisson)
median_income <- seq(from = 20000, to = 180000, length.out = 5)
median_income
View(burglaries_tracts)
median_income <- seq(from = 20000, to = 180000, length.out = 5)
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dpois(0:20,
lambda = predict(burg_poisson,
newdata = tibble(median_income = x, population = 4000), type = "response")
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
View(burglaries_tracts)
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dpois(0:20,
lambda = predict(burg_poisson,
newdata = tibble(median_income = x, population = 4000), type = "response")
)
)
)
?seq
median_income <- seq(from = 20000, to = 180000, length.out = 5)
map(median_income,
\(x) tibble(median_income = x,
num_burglaries = 0:20,
probability = dpois(0:20,
lambda = predict(burg_poisson,
newdata = tibble(median_income = x, population = 4000), type = "response")
)
)
) |>
bind_rows() |>
ggplot(aes(x = num_burglaries, y = probability)) +
geom_col() +
facet_wrap(~median_income)
burg_quasipoisson <- glm(num_burglaries ~ median_income + offset(log(population/1000)),
family = quasipoisson,
data = burglaries_tracts)
summary(burg_quasipoisson)
library(MASS)
burg_nb <- glm.nb(num_burglaries ~ median_income + offset(log(population/1000)),
data = burglaries_tracts)
summary(burg_nb)
library(shiny)
library(tidyverse)
runApp('Documents/temp/shiny/Starter_App')
runApp('Documents/temp/shiny/Starter_App')
library(tidyverse)
library(tidyverse)
gdp <- read_csv("../data/gdp_per_capita.csv")
View(gdp)
View(gdp)
gdp <- read_csv("../data/gdp_per_capita.csv") |>
select(-`Value Footnotes`) |>
rename(Country = `Country or Area`)
View(gdp)
gdp <- read_csv("../data/gdp_per_capita.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
Value = gdp_per_capita
)
gdp <- read_csv("../data/gdp_per_capita.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
Value = gdp_per_capita
)
gdp <- read_csv("../data/gdp_per_capita.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
gdp_per_capita = Value
)
View(gdp)
gdp <- read_csv("../data/gdp_per_capita.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
gdp_per_capita = Value
)
life_expectancy <- read_csv("../data/life_expectancy.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
life_expectancy = Value
)
life_expectancy <- read_csv("../data/life_expectancy.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
life_expectancy = Value
)
read_csv("../data/life_expectancy.csv")
read_csv("../data/life_expectancy.csv")
life_expectancy <- read_csv("../data/life_expectancy.csv")
View(life_expectancy)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4)
View(life_expectancy)
View(life_expectancy)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`)
View(life_expectancy)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`) |>
select(-c(`Country Code`, `Indicator Name`, `Indicator Code`, ...68))
View(life_expectancy)
?pivot_longer
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`) |>
select(-c(`Country Code`, `Indicator Name`, `Indicator Code`, ...68)) |>
pivot_longer(cols = -Country)
View(life_expectancy)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`) |>
select(-c(`Country Code`, `Indicator Name`, `Indicator Code`, ...68)) |>
pivot_longer(
cols = -Country,
names_to = "Year",
values_to = "life_expectancy"
)
View(life_expectancy)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`) |>
select(-c(`Country Code`, `Indicator Name`, `Indicator Code`, ...68)) |>
pivot_longer(
cols = -Country,
names_to = Year,
values_to = "life_expectancy"
)
gdp <- read_csv("../data/gdp_per_capita.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
gdp_per_capita = Value
)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`) |>
select(-c(`Country Code`, `Indicator Name`, `Indicator Code`, ...68)) |>
pivot_longer(
cols = -Country,
names_to = "Year",
values_to = "life_expectancy"
)
continents <- read_csv("../data/continents.csv")
un_data <- continents |>
inner_join(gdp) |>
inner_join(life_expectancy)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`) |>
select(-c(`Country Code`, `Indicator Name`, `Indicator Code`, ...68)) |>
pivot_longer(
cols = -Country,
names_to = "Year",
values_to = "life_expectancy"
) |>
mutate(Year = as.numeric(Year))
gdp <- read_csv("../data/gdp_per_capita.csv") |>
select(-`Value Footnotes`) |>
rename(
Country = `Country or Area`,
gdp_per_capita = Value
)
life_expectancy <- read_csv("../data/life_expectancy.csv", skip = 4) |>
rename(Country = `Country Name`) |>
select(-c(`Country Code`, `Indicator Name`, `Indicator Code`, ...68)) |>
pivot_longer(
cols = -Country,
names_to = "Year",
values_to = "life_expectancy"
) |>
mutate(Year = as.numeric(Year))
continents <- read_csv("../data/continents.csv")
un_data <- continents |>
inner_join(gdp) |>
inner_join(life_expectancy)
View(un_data)
un_data |>
write_rds("../un_demo_app/data/un_data.Rds")
setwd("~/Documents/NSS_Work/DS7/notebooks/R/RDS/un_demo_app")
library(tidyverse)
library(shiny)
un_data <- read_rds("data/un_data.Rds")
year_choices <- un_data |>
pull(Year) |>
unique() |>
sort()
library(shiny)
?selectInput
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
